plot(density(datos))
mtcars$mpg
row.names(mtcars)
View(mtcars)
dotchart(mtcars$mpg,labels=row.names(mtcars))
dotchart(mtcars$mpg,labels=row.names(mtcars),xlab="consumo")
abline(v=mean(mtcars$mpg))
boxplot(mpg~cyl,data=mtcars)
languages()
install.packages("swirl",dependencies=TRUE)
library("swirl")
select_language(())
select_language()
library(swirl)
swirl()
install_course_github("ifunam", "programacion-estadistica-r")
swirl()
swirl()
demo(graphics)
plot(1:5)
plot(c(1,2,3),c(4,5,6))
?plot
plot(c(1,2,3),c(4,5,6),type="l")
plot(c(1:6),type="s")
plot(c(6:10),type="s")
plot(6:10,type="s")
plot(1:10,type="b")
plot(1:5,main="Mi gráfica")
plot(1:5,main="Mi gráfica",xlab="x",ylab="y")
ponits(c(1,5),c(4,2),col="green")
points(c(1,5),c(4,2),col="green")
lines(c(1,4),c(2,5),col="yellow")
abline(h=3,col="red",lty=2)
abline(h=1:5,v=1:5,col="purple")
data("iris")
class("iris")
class(iris)
head(iris)
plot(iris)
plot(iris$Petal.Length,iris$Petal.Width)
hist(iris$Petal.Length,col="red")
hist(iris$Petal.Length,col="red",freq=FALSE)
hist(iris$Petal.Length,col="red",breaks=5)
?boxplot
boxplot(Sepal.Width~Species,data=iris,col=2:4)
pie(c(50,50,50).labels=(iris$Species))
pie(c(50,50,50).labels=levels(iris$Species))
pie(c(50,50,50),labels=levels(iris$Species))
hist(mtcars$mpg)
par()
param_orig<-par()
par(col.lab="red")
hist(mtcars$mpg)
hist(mtcars$cyl)
par(param_orig)
hist(mtcars$cyl)
pllot(1:10,1:10,type="n")
plot(1:10,1:10,type="n")
text(3,3,"por omision")
plot(3,3)
plot(1:10,1:10,type="n")
text(3,3,"por omision")
point(3,3)
points((3,3))
points(3,3)
points(3,3,col="black")
points(3,3,bg="black")
text(4,4,family="Sans","fuente Sans")
text(4,4,family="sans","fuente Sans")
text(5,5,family="serif","fuente Serif")
text(5,5,family="mono","fuente mono")
text(8,8,family="mono","fuente mono")
swirl()
?par
par()
par_orig<-par()
par(col
par(col)
par("col")
par(col="blue")
data("iris")
plot(iris)
par("col")
plot(iris,col=iris$Species)
colnames(iris)
col.names(iris)
info()
skip()
plot(iris$Sepal.Length,iris$Petal.Length,col=iris$Species)
par(pch=15)
plot(iris$Sepal.Length,iris$Petal.Length,col=iris$Species)
plot(iris$Sepal.Length,iris$Petal.Length,col=iris$Species,pch="A")
plot(iris$Sepal.Length,iris$Petal.Length,col=iris$Species)
plot(1:26,pch=0:25)
plot(iris$Sepal.Length,iris$Petal.Length,col=iris$Species,pch=21,bg="blue")
plot(iris$Sepal.Length,iris$Petal.Length,col=iris$Species,cex=2)
Ingresa legend(x = 4.5, y = 7, legend = levels(iris$Species), col =
| c(1:3), pch = 16)
legend(x = 4.5, y = 7, legend = levels(iris$Species), col = c(1:3), pch = 16)
par(par_orig)
colors()
help("grep")
grep("yellow",colors(),value=TRUE)
length(colors)
length(colors())
palette()
plot(1:8,main="Colores por índice",col=1:8,pch=17,cex=3)
plot(1:12,main="Colores por índice",col=1:12,pch=18,cex=3)
plot(1:12,main="Colores reciclados",col=1:12,pch=18,cex=3)
paleta_arcoiris<-rainbow(10)
paleta_arcoiris
palette(paleta_arcoiris)
palette()
plot(1:10,main="Paleta Arcoiris",col=1:8,pch=10,cex=3)
plot(1:10,main="Paleta Arcoiris",col=1:10,pch=10,cex=3)
plot(1:10,main="Paleta Arcoiris",col=1:10,pch=17,cex=3)
platea_calida<-heat.colors(10)
paleta_calida<-heat.colors(10)
palette(paleta_calida)
plot(1:10,col=1:10,main="Paleta Cálida",pch=17,cex=3)
mi_paleta<-c("red","green","#0019FFFF")
plot(1:10,col=mi_paleta,main="Mi Paleta",pch=17,cex=3)
palette(mi_paleta)
plot(1:10,col=1:10,main="Mi Paleta",pch=17,cex=3)
palette("default")
plot(iris$Sepal.Width,iris$Petal.Width)
plot(iris$Sepal.Width,iris$Petal.Width,col=iris$Species)
palette(topo.colors(3))
plot(iris$Sepal.Width,iris$Petal.Width,col=iris$Species)
palette(terrain.colors(3))
plot(iris$Sepal.Width,iris$Petal.Width,col=iris$Species)
plot(iris$Sepal.Width,iris$Sepal.Length,col=iris$Species)
par()
par(mar=c(3,3,3,3))
plot(iris$Sepal.Width,iris$Sepal.Length,col=iris$Species)
swirl()
plot(1:20,type="n")
text(5,5,"Hola Mundo!")
text(5,5,"¡Hola Mundo!")
text(5,5)
?text
text(11, 11, "¡Hola
| Mundo! x2", cex=2)
text(11, 11, "¡Hola Mundo! x2", cex=2)
text(7, 7, "¡Hola Mundo con Serif!", family="serif")
text(9, 9, "¡Hola Mundo con mono!", family="mono")
info()
skip
skip()
skip()
demo(plotmath)
plot(1:10,type="n",main=expression(alpha+beta))
plot(1:10,type="n",main=paste("Valores de ",x^phi1))
plot(1:10,type="n",main=paste("Valores de ",x^phi1)))
plot(1:10,type="n",xlab=expression(paste("Valores de ",x^phi1)))
?plotmath
t<-10
plot(1:t,main=substitute(paste("la gráfica del vector 1:",x),list(x=t)))
plot(1:t,main=substitute(paste("La gráfica del vector 1:",x),list(x=t)))
t<-20
plot(1:t,main=substitute(paste("La gráfica del vector 1:",x),list(x=t)))
?substitute
install.packages("rgl")
x<-sort(rnorm(1000))
y<-rnorm(1000)
<>_
z<-rnorm(1000)+atan2(x,y)
open3d()
plot3d(x,y,z)
library(rgl)
open3d
open3d()
swiss
swirl()
swirl()
install.packages("installr")
setInternet2(TRUE)
installr::updateR() # actualizar R.
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:rgl", unload=TRUE)
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
open3d()
swirl()
data("iris")
head(iris)
x<-iris$Sepal.Length
y<-iris$Petal.Length
z<-iris$Sepal.Width
?`rgl-package`
?rgl
open3d()
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width)
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width,type="s")
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width,type="s",col=rainbow(100))
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width,type="s",col=rainbow(150))
skip()
skip()
skip()
skip()
grep("hola",c("mundo","hola","ejemplo","grep"))
grep("ola",c("mundo","hola","ejemplo","grep"))
grep("ola",c("mundo","hola","ejemplo","gramola"))
nchar(c("uno","dos","tres"))
nchar(c("uno","dos","tres"))
paste(c("uno","dos","tres"))
paste("esto","es","una","cadena")
paste("esto","es","una","cadena",sep="-")
i<-4
sprintf("el cuadrado de %d es %d",i,i^2)
for(i in 1:4){
sprintf("el cuadrado de %d es %d",i,i^2)
}
for (i in 1:4){
print(i)
}
for (i in 1:4){
sprintf("el cuadrado de %d es %d",i,i^2)
}
?sprintf
i=0.12
sprintf(%f,i)
sprintf("%f",i)
sprintf("%.3f",i)
sprintf("%1.0f",i)
sprintf("%e",i)
sprintf("%g",i)
sprintf("%p",i)
sprintf("%s",i)
sprintf("%f",i)
sprintf("%x",i)
sprintf("%i",i)
strsplit("holca hola hola"," ")
strsplit("holca hola hola","h")
help("regexpr")
regexpr("[aeiou]","cuentame como te ha ido")
gregexpr("[aeiou]","cuentame como te ha ido")
grep(["ae"],"alejandro")
grep("ae","alejandro")
grep("a.e","alejandro")
grep("a.e",c("alejandro","amelia"))
swirl()
library(swirl)
swirl()
texto<-"¡ -H"
texto<-"¡Hola Mundo!"
texto[1]
texto[2]
?substring
substring(texto,7,11)
substring(texto,7,11)<-"Swirl"
texto
nchar(texto)
paste("¡Adiós","Mundo!")
paste("¡Adiós","Mundo!",sep="-")
paste("¡Adiós","Mundo!",sep="_")
i<-9
sprintf("El cuardado de %d es %d",i,i^2)
sprintf("El cuadrado de %d es %d",i,i^2)
?sprintf
strsplit("Me/gusta/programar/en/R", "/")
chartr("o","a","¡Hola Mundo!")
patron<-"H(a|ä|ae)ndel"
musicos
grep(patron,musicos)
nuevo_patron<-".(a|ä|ae|e)ndel"
grep(nuevo_patron,musicos)
regexpr(nuevo_patron,musicos)
regexpr(patron,musicos)
gregexpr(patron, "Georg Friedrich Händel, en inglés George Frideric Handel fue un compositor alemán.")
?regexpr
diamonds
tail(diamonds)
table(diamonds)
install.packages((ggplot2))
install.packages(("ggplot2"))
library(ggplot2)
table(diamonds)
table("diamonds")
set,seed(100)
set.seed(100)
dchico<-diamonds[sample(nrow(diamonds),100)]
dchico<-diamonds[sample(nrow(diamonds),100),]
dchico
qplot(carat,price,data = diamonds)
qplot(carat,price,data = dchico)
qplot(log(carat),log(price),data = dchico)
qplot(price,x*y*z,data = diamonds)
qplot(price,cut,data = diamonds)
qplot(cut,prize,data = diamonds)
qplot(cut,price,data = diamonds)
qplot(cut,price,data = diamonds,alpha=i/100)
qplot(cut,price,data = diamonds,alpha=i/10000)
qplot(carat,price,data = dchico,color=color)
qplot(carat,price,data = dchico,color=ord)
qplot(carat,price,data = dchico,color=clarity)
qplot(carat,price,data = diamonds,alpha=I(1/100))
qplot(carat,price,data = diamonds,alpha=I(1/1000))
qplot(cut,price,data = diamonds,alpha=i(1/100))
qplot(cut,price,data = diamonds,alpha=I(1/100))
qplot(cut,price,data = diamonds,alpha=I(1/1000))
qplot(cut,price,data = diamonds,alpha=I(1/200))
qplot(carat,price,data=diamonds,facets=color~.)
qplot(price,x*y*z,data=diamonds,facets=color~.)
qplot(price,cut,data=diamonds,facets=color~.)
qplot(carat,price,data = diamonds,facets=color~.,alpha=I(1,100))
qplot(carat,price,data = diamonds,facets=color~.,alpha=I(1/100))
qplot(carat,price,data = diamonds,facets=clarity~.,alpha=I(1/100))
qplot(carat,price,data = diamonds,geom=c("point"))
qplot(carat,price,data = dchico,geom=c("point"))
qplot(carat,price,data = dchico,geom=c("point","smooth"))
qplot(color,price/carat,data=diamonds,geom="boxplot")
qplot(color,price,data=diamonds,geom="boxplot")
qplot(clarity,price,data=diamonds,geom="boxplot")
qplot(cut,price,data=diamonds,geom="boxplot")
qplot(cut,price/carat,data=diamonds,geom="boxplot")
qplot(cut,price/x*y*z,data=diamonds,geom="boxplot")
qplot(cut,price/x*y,data=diamonds,geom="boxplot")
qplot(cut,price/y,data=diamonds,geom="boxplot")
qplot(cut,price/x,data=diamonds,geom="boxplot")
qplot(cut,price/z,data=diamonds,geom="boxplot")
qplot(cut,price/y,data=diamonds,geom="boxplot")
swirl()
library(swirl)
Miguel
swirl()
data(diamonds)
view(diamonds)
View(diamonds)
?qplot
qplot(color,data=diamonds)
qplot(carat,price,data=diamonds)
qplot(log(carat),log(price),data=diamonds)
qplot(carat,x*y*z,data=diamonds)
qplot(carat,price,data=diamonds,color=color)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,alpha=I(1/10))
qplot(carat,price,data=diamonds,alpha=I(1/100))
qplot(carat,price,data=diamonds,size=table)
qplot(carat,price,data=diamonds,facets=color~.)
qplot(carat, price, data=diamonds, geom = c("point", "smooth"))
qplot(color, price/carat, data=diamonds, geom = "jitter")
qplot(color, price/carat, data=diamonds, geom = "boxplot")
0
sqrt(c(9,16,25))
vector<-c(12,45,65,32,12,4,89)
which.min(c)
sum(vector)
which.min(vector)
factorial(5)
x<-matrix(c(1,-1,1,1),2,2)
y<-c(2,4)
solve(x,y)
t(x)
solve(x)
det(x)
diag(x)
diag(diagonal)
diag(5)
sort(x)
choose(6,2)
set.seed(10)
mean(rnorm(1000,0,1))
qnorm(0.95,0,1)
rbinom(1,7,0.5)
rbinom(100000,7,0.5)
tail(resultados>=5)
resultados<-rbinom(100000,7,0.5)
tail(resultados)
tail(resultados>=5)
mean(resultados>=5)
library(swirl)
swirl()
?Normal
help(Distributions)
?rbinom
rbinom(1,7,0.5)
resultado<-rbinom(100000,7,0.5)
tail(resultado)
tail(resultado>5)
men(resultado>5)
mean(resultado>5)
?set.seed
f>-function(a) g(a)
g<-function(b) h(b)
h<-function(d)"a"+d
f<-function(a) g(a)
g<-function(b) h(b)
h<-function(d)"a"+d
f(10)
f(10)
c
c
n
n
f(10)
f(10)
grasas <- read.table("http://www.uam.es/joser.berrendero/datos/EdadPesoGrasas.txt",
header = TRUE)
names(grasas)
pairs(grasas)
cor(grasas)
qplot(edad,grasas,table=grasas)
qplot(edad,grasas,data=grasas)
qplot(edad,grasas,color=peso)
qplot(edad,grasas,color="peso")
qplot(edad,grasas,color=peso,data=grasas)
regresion<-lm(grasas~edad,data=grasas)
summary(regression)
summary(regresion)
plot(grasas$edad,grasas$grasas,xlab="Edad",ylab="Grasas")
abline(regresion)
nuevas.edades<-data.frame(edad=seq(30,50))
View(nuevas.edades)
predict(regresion,nuevas.edades)
confint(regresion)
lines(nuevas.edades$edad, ic[, 3], lty = 2, col = "red")
nuevas.edades <- data.frame(edad = seq(20, 60))
# Grafico de dispersion y recta
plot(grasas$edad, grasas$grasas, xlab = "Edad", ylab = "Grasas")
abline(regresion)
# Intervalos de confianza de la respuesta media: ic es una matriz con tres
# columnas: la primera es la prediccion, las otras dos son los extremos
# del intervalo
ic <- predict(regresion, nuevas.edades, interval = "confidence")
lines(nuevas.edades$edad, ic[, 2], lty = 2)
lines(nuevas.edades$edad, ic[, 3], lty = 2)
# Intervalos de prediccion
ic <- predict(regresion, nuevas.edades, interval = "prediction")
lines(nuevas.edades$edad, ic[, 2], lty = 2, col = "red")
lines(nuevas.edades$edad, ic[, 3], lty = 2, col = "red")
residuos <- rstandard(regresion)
valores.ajustados <- fitted(regresion)
plot(valores.ajustados, residuos)
qqnorm(residuos)
qqline(residuos)
# Variable regresora (dieño fijo) y parámetros
x = seq(1, 10)
beta0 <- 0
beta1 <- 1
sigma <- 0.3
# Genera la variable respuesta
y <- beta0 + beta1 * x + rnorm(length(x), sd = sigma)
# Ajusta el modelo
reg <- lm(y ~ x)
# Extrae el valor de la pendiente estimada
coefficients(reg)[2]
# Resume el ajuste
summary(reg)
edad<-c(56,42,72,36,63,47,55,47,38,42)
presion<-c(148,126,159,118,149,130,151,142,114,141)
edad
presion
plot(presion,edad)
reg_lin<-lm(edad~presion)
summary(reg_lin)
abline(reg_lin)
plot(reg_lin)
ks.test(reg_lin$residuals,"pnorm")
install.packages("lmtest")
library("lmtest", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
dwtest(edad~presion)
library(swirl)
swirl()
0
swirl()
install_course("Regression Models")
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regline<-lm(child~parent,galton)
regline<-lm(child ~ parent, galton)
regrline<-lm(child ~ parent, galton)
abline(regrline)
abline(regrline,lwd=3,col="red")
summary(regrline)
swirl()
library(swirl)
swirl()
fit<-lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals,galton$parent)
ols.ic<-fit$coefficients[1]
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
"lhs-rhs"
lhs-rhs
all.equal(lhs,rhs)
vachild<-var(galton$child)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(est())
varEst<-var(est(ols.ic,ols.slope))
varEst<-var(est(ols.slope,ols.ic))
skip()
efit<-lm(accel~mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
swirl()
swirl()
cor(gpa_nor,gch_nor)
lm(gch~gch_nor,gpa_nor)
lnor<-lm(gch_nor~gpa_nor)
l_nor<-lm(gch_nor~gpa_nor)
2+2
GETWD()
getwd()
setwd("/Users/maccasa/PROGRAMACION/Curso_R_Udemy/scripts/TEMA_1")
getwd()
